class mainThread: 
    def __init__(self): 
        self.clientIP = ''
        self.dataQueue = queue.Queue(10) 
        self.responseQueue = queue.Queue(10) 
        self.queueLock = threading.Lock()
        self.server = serverSocket.ServerSocket()  
        self.client = None

    def run(self): 
        thread1 = thread.Thread(target = self.server.run, name="Thread-1", args = (self.queueLock, self.dataQueue, self.responseQueue, self)) # 传递self作为参数
        thread1.start() # 启动线程
        
        while self.clientIP == '': # 等待客户端IP地址被赋值
            time.sleep(100) 
        
        self.client = clientSocket.ClientSocket(self.clientIP) # 根据客户端IP地址创建clientSocket对象
        thread2 = thread.Thread(target=self.client.run, name="Thread-2") # 创建线程
        thread2.start() # 启动线程

class ServerSocket: 
    def __init__(self) -> None: 
        self.serverSocket = socket(AF_INET, SOCK_STREAM) 

        self.hostname = '0.0.0.0' 
        self.port = 8081 
        self.done = False 

    def terminate(self): 
        print("Stopping socket...")
        self.done = True 
        self.serverSocket.close() 
    
    def run(self, dataQueue, responseQueue, mainThread) -> None: # 接收mainThread作为参数
        self.serverSocket.bind((self.hostname, self.port))
        self.serverSocket.listen(1) 

        while not self.done: 
            print("The server is ready to accept information...") 
            connectionSocket, address = self.serverSocket.accept()
            print(f"Connected to {address}") 

            mainThread.clientIP = address[0] # 将客户端IP地址赋值给mainThread的属性

            running = True 
            while running: 
                try: 
                    data = connectionSocket.recv(1024)                  
                    receivedData = pickle.loads(data)
                    
                    handleFullQueue(dataQueue, receivedData) 
                    responseData = responseQueue.get()
                    connectionSocket.sendall(pickle.dumps(responseData)) 

                except Exception as e: 
                    print(e)
                    running = False 
            
            connectionSocket.close()
